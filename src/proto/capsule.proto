syntax = "proto2";

package capsule;

message CapsuleHeader {
  optional int64 sender = 1;
  optional bytes prevHash = 2; // header hash of prev record
  optional bytes hash = 3; // hash of payload

  optional int64 timestamp = 6; // logical timestamp
  optional int64 last_logical_timestamp = 7; 
  optional string msgType = 8; // type of msg (e.g. EOE, RTS, SYNC)

  optional int64 msgLen = 9; // length of payload, pre-encryption
  optional string replyAddr = 10; // to send ack
  optional bool verified = 4001; // the record is verified or not
}


message CapsulePDU {
  optional CapsuleHeader header = 1; //
  optional bytes header_hash = 2; // hash of header 
  optional bytes signature = 3; // signed using header hash
  optional int64 signature_len = 4;
  optional bytes payload_in_transit = 5;
}

/* 
message CapsulePDU {
  optional bytes payload_in_transit = 1; // encrypted payload
  optional int64 sender = 2;
  optional bytes signature = 3;
  optional int64 signatureLen = 31; 
  optional bytes prevHash = 4; // Hash ptr to the previous record, not needed for the minimal prototype
  optional bytes hash = 5; // Hash of pdu
  optional int64 timestamp = 6; //timestamp
  optional string msgType = 7; // type of msg (e.g. EOE, RTS, SYNC)
  optional int64 msgLen = 8; // length of payload, pre-encryption
  optional string replyAddr = 9; // to send ack
  optional string payload_hmac = 10; // to use hmac
  optional bool verified = 4001; // the record is verified or not
}
*/
